#!/usr/bin/env bash

set -eo pipefail

action="$1"
version="1.3.0"

: ${CLUSTER_NAME:="k8s"}

case "${action}" in
  login)
    kubectl config set-cluster "${CLUSTER_NAME}" --server="${KUBE_API_URL}" --certificate-authority="${KUBE_API_CERT_FILE}" --embed-certs=true
    kubectl config set-credentials "${CLUSTER_NAME}-user" --token="${KUBE_API_TOKEN}"
    kubectl config set-context "${CLUSTER_NAME}" --cluster "${CLUSTER_NAME}" --user "${CLUSTER_NAME}-user"
    kubectl config use-context "${CLUSTER_NAME}"
    ;;

  logout)
    kubectl config delete-context "${CLUSTER_NAME}"
    kubectl config delete-user "${CLUSTER_NAME}-user"
    kubectl config delete-cluster "${CLUSTER_NAME}"
    ;;

  generate-secret-manifest)
    env_file_name="$(echo "${APP_NAME}_ENV_FILE" | tr '-' '_' | tr '[:lower:]' '[:upper:]')"
    
    [[ ! -f "${!env_file_name}" ]] && echo ">>> '${!env_file_name}' ('${env_file_name}') doesn't exists <<<" && exit 1
    
    kubectl create secret generic "${APP_NAME}-secret" \
      --from-env-file="${!env_file_name}" \
      --dry-run=client \
      -o yaml
    ;;

  help)
    echo "$0 login, envs: KUBE_API_URL, KUBE_API_CERT_FILE, KUBE_API_TOKEN, [CLUSTER_NAME]"
    echo "$0 logout, envs: [CLUSTER_NAME]"
    echo "$0 generate-secret-manifest, envs: APP_NAME, \${APP_NAME}_ENV_FILE"
    ;;

  version)
    echo "${version}"
    ;;

  *)
    echo "Usage: $0 help"
    echo "Version: ${version}"

    exit 1
    ;;
esac
